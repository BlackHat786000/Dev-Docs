prepare a development environment to build custom modules

https://cn-ansibledoc.readthedocs.io/zh-cn/latest/dev_guide/developing_modules_general.html#prerequisites-via-apt-ubuntu
https://www.youtube.com/watch?v=7pzJ6ri4RTM

sudo apt update
sudo apt install build-essential libssl-dev libffi-dev python3
git clone https://github.com/ansible/ansible.git
cd ansible
python3 -m venv venv (install virtualenv package if not installed using `sudo apt install python3-venv`)
. venv/bin/activate
pip install -r requirements.txt
. hacking/env-setup

After the initial setup above, every time you are ready to start developing Ansible you should be able to just run the following from the root of the Ansible repo: . venv/bin/activate && . hacking/env-setup

Start creating your new module:

cd lib/ansible/modules
touch base64mod.py

------------------------------------------------------------------------------------------------------------------------------------------

#!/usr/bin/python

# Copyright: (c) 2018, Terry Jones <terry.jones@example.org>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import (absolute_import, division, print_function)
import base64
__metaclass__ = type

DOCUMENTATION = r'''
---
module: base64mod

short_description: This is my base64mod module

# If this is part of a collection, you need to use semantic versioning,
# i.e. the version is of the form "2.5.0" and not "2.4".
version_added: "1.0.0"

description: This is my longer description explaining my test module.

options:
    name:
        description: This is the message to send to the test module.
        required: true
        type: str
    new:
        description:
            - Control to demo if the result of this module is changed or not.
            - Parameter description can be a list as well.
        required: false
        type: bool
# Specify this value according to your collection
# in format of namespace.collection.doc_fragment_name
extends_documentation_fragment:
    - my_namespace.my_collection.my_doc_fragment_name

author:
    - Your Name (@yourGitHubHandle)
'''

EXAMPLES = r'''
# Pass in a message
- name: Test with a message
  my_namespace.my_collection.base64mod:
    name: hello world

# pass in a message and have changed true
- name: Test with a message and changed output
  my_namespace.my_collection.base64mod:
    name: hello world
    new: true

# fail the module
- name: Test failure of the module
  my_namespace.my_collection.base64mod:
    name: fail me
'''

RETURN = r'''
# These are examples of possible return values, and in general should use other names for return values.
original_message:
    description: The original name param that was passed in.
    type: str
    returned: always
    sample: 'hello world'
message:
    description: The output message that the base64mod module generates.
    type: str
    returned: always
    sample: 'goodbye'
'''

from ansible.module_utils.basic import AnsibleModule


def run_module():
    encode_status = False
    decode_status = False
    # define available arguments/parameters a user can pass to the module
    module_args = dict(
        name=dict(type='str', required=True),
        type=dict(type='str', required=True),
        new=dict(type='bool', required=False, default=False)
    )

    # seed the result dict in the object
    # we primarily care about changed and state
    # changed is if this module effectively modified the target
    # state will include any data that you want your module to pass back
    # for consumption, for example, in a subsequent task
    result = dict(
        changed=False,
        original_message='',
        message=''
    )

    # the AnsibleModule object will be our abstraction working with Ansible
    # this includes instantiation, a couple of common attr would be the
    # args/params passed to the execution, as well as if the module
    # supports check mode
    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    # if the user is working with this module in only check mode we do not
    # want to make any changes to the environment, just return the current
    # state with no modifications
    if module.check_mode:
        module.exit_json(**result)

    # manipulate or modify the state as needed (this is going to be the
    # part where your module will do what it needs to do)

    if module.params['type'].lower() == 'encode':
        encode_status = True

    if module.params['type'].lower() == 'decode':
        decode_status = True

    if not encode_status and not decode_status:
        module.fail_json(msg='Bad input -- It should be encode or decode', **result)

    # Change string to base64 and return it
    if encode_status:
        message = module.params['name']
        message_bytes = message.encode('ascii')
        base64_bytes_string = str(base64.b64encode(message_bytes))

        result['original_message'] = message
        result['encoded_message'] = base64_bytes_string
        result['message'] = 'Your data is encoded in base64 using python. module by udit.'

    if decode_status:
        base64_message = module.params['name']
        base64_bytes = base64_message.encode('ascii')
        base64_bytes_string = str(base64.b64decode(base64_bytes))

        result['original_message'] = base64_message
        result['decoded_message'] = base64_bytes_string
        result['message'] = 'Your data is decoded in base64 using python. module by udit.'

    # use whatever logic you need to determine whether or not this module
    # made any modifications to your target
    if module.params['new']:
        result['changed'] = True

    # during the execution of the module, if there is an exception or a
    # conditional state that effectively causes a failure, run
    # AnsibleModule.fail_json() to pass in the message and the result
    if module.params['name'] == 'fail me':
        module.fail_json(msg='You requested this to fail', **result)

    # in the event of a successful module execution, you will want to
    # simple AnsibleModule.exit_json(), passing the key/value results
    module.exit_json(**result)


def main():
    run_module()


if __name__ == '__main__':
    main()
	
------------------------------------------------------------------------------------------------------------------------------------------

create and run a playbook: cd /home/ubuntu

------------------------------------------------------------------------------------------------------------------------------------------
- name: Convert string to base 64
  hosts: localhost
  tasks:
  - name: Convert the string to base64
    base64mod:
      name: 'hello'
      type: 'encode'
      new: true
    register: testout
  - name: dump test output
    debug:
      msg: '{{ testout }}'
------------------------------------------------------------------------------------------------------------------------------------------























Exercising module code locally:
--------------------------------
If your module does not need to target a remote host, you can quickly and easily exercise your code locally like this:

Create an arguments file, a basic JSON config file that passes parameters to your module so you can run it. Name the arguments file /tmp/args.json and add the following content: cd /tmp/
{
    "ANSIBLE_MODULE_ARGS": {
        "name": "hello",
        "type": "encode",
        "new": true
    }
}
If you are using a virtual environment (highly recommended for development) activate it: $ . venv/bin/activate
Setup the environment for development: $ . hacking/env-setup
Run your test module locally and directly: $ python -m ansible.modules.base64mod /tmp/args.json
This should return output like this:

{"changed": true, "state": {"original_message": "hello", "new_message": "goodbye"}, "invocation": {"module_args": {"name": "hello", "new": true}}}

--------------------------------



export GOOGLE_APPLICATION_CREDENTIALS="/home/ubuntu/gke-secret-mgr.json"
pip install google-cloud-secret-manager

------------------------------------------------------------------------------------------------------------------------------------------
// get_secret.py
from google.cloud import secretmanager

def get_secret(project_id, secret_name, version="latest"):
    client = secretmanager.SecretManagerServiceClient()
    secret_path = f"projects/{project_id}/secrets/{secret_name}/versions/{version}"

    try:
        response = client.access_secret_version(name=secret_path)
        secret_payload = response.payload.data.decode("UTF-8")
        return True, secret_payload
    except Exception as e:
        return False, str(e)

if __name__ == "__main__":
    project_id = "38066787370"
    secret_name = "secret-key"

    success, secret_data = get_secret(project_id, secret_name)

    if success:
        print(f"Secret: {secret_data}")
    else:
        print(f"Failed to fetch secret. Error: {secret_data}")
------------------------------------------------------------------------------------------------------------------------------------------
		
		
python get_secret.py


------------------------------------------------------------------------------------------------------------------------------------------

#!/usr/bin/python

# Copyright: (c) 2018, Terry Jones <terry.jones@example.org>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import (absolute_import, division, print_function)
from google.cloud import secretmanager
__metaclass__ = type

DOCUMENTATION = r'''
---
module: get_gcloud_secret

short_description: This is get_gcloud_secret module to fetch secrets from GSM

# If this is part of a collection, you need to use semantic versioning,
# i.e. the version is of the form "2.5.0" and not "2.4".
version_added: "1.0.0"

description: This is my longer description explaining my test module.

options:
    name:
        description: This is the message to send to the test module.
        required: true
        type: str
    new:
        description:
            - Control to demo if the result of this module is changed or not.
            - Parameter description can be a list as well.
        required: false
        type: bool
# Specify this value according to your collection
# in format of namespace.collection.doc_fragment_name
extends_documentation_fragment:
    - my_namespace.my_collection.my_doc_fragment_name

author:
    - Your Name (@yourGitHubHandle)
'''

EXAMPLES = r'''
# Pass in a message
- name: Test with a message
  my_namespace.my_collection.base64mod:
    name: hello world

# pass in a message and have changed true
- name: Test with a message and changed output
  my_namespace.my_collection.base64mod:
    name: hello world
    new: true

# fail the module
- name: Test failure of the module
  my_namespace.my_collection.base64mod:
    name: fail me
'''

RETURN = r'''
# These are examples of possible return values, and in general should use other names for return values.
original_message:
    description: The original name param that was passed in.
    type: str
    returned: always
    sample: 'hello world'
message:
    description: The output message that the base64mod module generates.
    type: str
    returned: always
    sample: 'goodbye'
'''

from ansible.module_utils.basic import AnsibleModule


def run_module():

    # define available arguments/parameters a user can pass to the module
    module_args = dict(
        project_id=dict(type='str', required=True),
        secret_name=dict(type='str', required=True),
        version=dict(type='str', required=False, default='latest'),
        new=dict(type='bool', required=False, default=False)
    )

    # seed the result dict in the object
    # we primarily care about changed and state
    # changed is if this module effectively modified the target
    # state will include any data that you want your module to pass back
    # for consumption, for example, in a subsequent task
    result = dict(
        changed=False,
        secret_data='',
        message=''
    )

    # the AnsibleModule object will be our abstraction working with Ansible
    # this includes instantiation, a couple of common attr would be the
    # args/params passed to the execution, as well as if the module
    # supports check mode
    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    # if the user is working with this module in only check mode we do not
    # want to make any changes to the environment, just return the current
    # state with no modifications
    if module.check_mode:
        module.exit_json(**result)

    # manipulate or modify the state as needed (this is going to be the
    # part where your module will do what it needs to do)

    project_id = module.params['project_id']
    secret_name = module.params['secret_name']
    version = module.params['version']

    client = secretmanager.SecretManagerServiceClient()
    secret_path = f"projects/{project_id}/secrets/{secret_name}/versions/{version}"

    try:
        response = client.access_secret_version(name=secret_path)
        secret_data = response.payload.data.decode("UTF-8")
        result['secret_data'] = secret_data
        result['message'] = 'Secret fetched successfully from GSM'
    except Exception as e:
        module.fail_json(msg='Failed to fetch secret from GSM', **result)

    # use whatever logic you need to determine whether or not this module
    # made any modifications to your target
    if module.params['new']:
        result['changed'] = True

    # during the execution of the module, if there is an exception or a
    # conditional state that effectively causes a failure, run
    # AnsibleModule.fail_json() to pass in the message and the result
    if module.params['version'] == 'fail me':
        module.fail_json(msg='You requested this to fail', **result)

    # in the event of a successful module execution, you will want to
    # simple AnsibleModule.exit_json(), passing the key/value results
    module.exit_json(**result)


def main():
    run_module()


if __name__ == '__main__':
    main()
	
------------------------------------------------------------------------------------------------------------------------------------------




























. venv/bin/activate && . hacking/env-setup